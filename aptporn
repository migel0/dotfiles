#!/usr/bin/env bash
# vim: noai:ts=4:sw=4:expandtab
# script: aptporn
# describe: Linux Mint, Ubuntu and Debian install bspwm + polybar and more
# author: Marcos Oliveira <https://terminalroot.com.br/shell>
# modified by migel0
# version: 2.0
# license: GNU GPLv3


#Colours
green="\e[0;32m\033[1m"
end="\033[0m\e[0m"
red="\e[0;31m\033[1m"
blue="\e[0;34m\033[1m"
yellow="\e[0;33m\033[1m"
purple="\e[0;35m\033[1m"
cyan="\e[0;36m\033[1m"
gray="\e[0;37m\033[1m"




[[ $(echo $LANG | cut -c 1-2) == "pt" ]] && _MSG="Não use 'sudo' e nem 'root'" || _MSG="Do not use 'sudo' or 'root'"
[[ $(id -u) -eq 0 ]] && echo ${_MSG} && exit 1

CURRENT_DIR=$(pwd)

shopt -s extglob

usage() {
  cat <<EOF
usage: ${0##*/} [flags]
  Options:
    --install,  -i  Install aptporn
    --unistall, -u  Uninstall aptporn
    --version,  -v  Show version
    --help,     -h  Show this is message
    --update,   -U  Update your system
* Marcos Oliveira - <terminalroot.com.br> - APTPORN 2.0
EOF
}


if [[ -z $1 || $1 = @(-h|--help) ]]; then
  usage
  exit $(( $# ? 0 : 1 ))
fi

version="${0##*/} version 2.0"



_updates(){
  sudo apt update
  sudo apt full-upgrade -y
  sudo apt clean
  sudo apt autoremove -y
  sudo apt autoclean
  sudo apt-get install git -y
  exit 0
}


_removesnap(){
  sudo snap remove snap-store
  sudo snap remove gtk-common-themes
  sudo snap remove gnome-3-34-1804
  sudo snap remove core18
  sudo apt purge snapd
  for x in `ls /snap/core/ | grep -v current`; do unmount /snap/core/$x ; done
  rm -rf ~/snap
  sudo rm -rf /snap
  sudo rm -rf /var/snap
  sudo rm -rf /var/lib/snapd
}
_deps_build(){
  sudo apt install -y build-essential \
    cmake cmake-data pkg-config libcairo2-dev \
    libxcb1-dev libxcb-util0-dev libxcb-randr0-dev \
    libxcb-composite0-dev python3-xcbgen xcb-proto \
    libxcb-image0-dev libxcb-ewmh-dev \
    libxcb-icccm4-dev \
    libcurl4-openssl-dev libjsoncpp-dev libpulse-dev libmpdclient-dev libasound2-dev libxcb-cursor-dev libxcb-xrm-dev libxcb-xkb-dev libnl-genl-3-dev \
    lightd lightd-gtk-greeter zsh apt-transport-https
  }

_apt_packs(){
  sudo apt install -y bspwm sxhkd \
    subversion rofi feh numlockx  \
    compton dunst neofetch imagemagick webp unifont tmux git vim \
    python3-sphinx python3-packaging i3-wm \
    libasound2-dev curl libpulse-dev libxcb-xkb-dev i3-wm libcurl4-openssl-dev wireless-tools \
    libxcb-cursor-dev i3-wm  kitty firefox
}


_tools(){
  mkdir /tmp/installation
  cd /tmp/installation
  wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
  sudo install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
  sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/code stable main" > /etc/apt/sources.list.d/vscode.list'
  rm -f packages.microsoft.gpg
  sudo apt update
  sudo apt install code # or code-insiders
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
	echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >> ~/.zshrc
  sudo git clone --depth=1 https://github.com/romkatv/powerlevel10k.git /root/powerlevel10k
  sudo echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >> .zshrc
  sudo cp   .zshrc /root/.zshrc
	sudo apt install zsh-syntax-highlighting zsh-autosuggestions -y
	cd /usr/share
  sudo mkdir zsh-sudo
  cd zsh-sudo
  sudo wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/plugins/sudo/sudo.plugin.zsh
	sudo chmod +x /usr/share/zsh-sudo/sudo.plugin.zsh
	sudo chown $USER:$USER -R *
  cd /tmp/installation
 	git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf;
	~/.fzf/install -all
  sudo  git clone --depth 1 https://github.com/junegunn/fzf.git /root/.fzf
  /root/.fzf/install -all
}



}



_build_polybar(){
  cd /tmp
  git clone --recursive https://github.com/polybar/polybar
  cd polybar/
  sed -i 's/read /#read /g' build.sh
  mkdir build
  cd build
  cmake ..
  make -j$(nproc)
  # Optional. This will install the polybar executable in /usr/local/bin
  sudo make install
}

_git_svn_packs(){
  [[ ! -d "${HOME}/.local/share/fonts" ]] && mkdir -p "${HOME}/.local/share/fonts"
  svn export https://github.com/terroo/fonts/trunk/fonts
  mv fonts ${HOME}/.local/share/fonts/
  fc-cache -fv
}

_cfg_all(){
  cd $CURRENT_DIR
  mv bspwm/ ${HOME}/.config/ 
  mv sxhkd/ ${HOME}/.config/ 
  mv dunst/ ${HOME}/.config/ 
  mv polybar/ ${HOME}/.config/ 
  mv rofi/ ${HOME}/.config/
  mv wallpaper.jpg ${HOME}/.wallpaper.jpg
  feh --bg-scale ${HOME}/.wallpaper.jpg
  NETW=$(ip addr | awk '/state UP/ {print $2}' | sed 's/://g')
  sed -i -r "s/[a-z0-9]+ ;redoo/$NETW/g" ${HOME}/.config/polybar/modules.ini
  [[ $(grep -i 'mint' /etc/issue) ]] && _d=" Linux Mint"
  [[ $(grep -i 'ubuntu' /etc/issue) ]] && _d=" Ubuntu"
  [[ $(grep -i 'debian' /etc/issue) ]] && _d=" Debian"
  sed -i "s/DISTROOO/$_d/" ${HOME}/.config/polybar/user_modules.ini
  #sed -i "/$_d/s/^#//" ${HOME}/.config/polybar/scripts/menu
}


_cfg_srv(){
  sudo systemctl enable lightd.service
}





_start(){
  cat <<EOF
 █████╗ ██████╗ ████████╗██████╗  ██████╗ ██████╗ ███╗   ██╗
██╔══██╗██╔══██╗╚══██╔══╝██╔══██╗██╔═══██╗██╔══██╗████╗  ██║
███████║██████╔╝   ██║   ██████╔╝██║   ██║██████╔╝██╔██╗ ██║
██╔══██║██╔═══╝    ██║   ██╔═══╝ ██║   ██║██╔══██╗██║╚██╗██║
██║  ██║██║        ██║   ██║     ╚██████╔╝██║  ██║██║ ╚████║
╚═╝  ╚═╝╚═╝        ╚═╝   ╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═══╝                      


EOF
}

_ok(){
  clear
  echo "INSTALLATION FINISHED!"
  _start
}

_install(){
  _start
  _apt_packs
  _deps_build
  [[ ! $(which cmake 2>/dev/null) ]] && _deps_build
  _git_svn_packs
  [[ $(grep -i 'debian' /etc/issue) ]] && sudo apt -y install polybar || _build_polybar
  _cfg_all
  _cfg_srv
  _tools
  _ok
  exit 0
}

_uninstall(){
  sudo apt remove -y bspwm rofi
  sudo rm $(which polybar)
  rm -rf ${HOME}/.fehbg ${HOME}/.wallpaper.jpg
  rm -rf ${HOME}/.local/share/fonts/fonts
  rm -rf ${HOME}/.config/{bspwm,sxhkd,polybar,rofi,dunst}
  exit 0
}

while [[ "$1" ]]; do
  case "$1" in
    "--install"|"-i") _install ;;
    "--uninstall"|"-u") _uninstall ;;
    "--help"|"-h") usage ;;
    "--version"|"-v") printf "%s\n" "$version" && exit 0 ;;
    "--update"|"-U") _updates && exit 0 ;;
    *) echo 'Invalid option.' && usage && exit 1 ;;
  esac
  shift
done
